openapi: 3.0.0
info:
  title: Verifications
  version: "1.0.1"
  description: |
    Verification REST API for verifying phone numbers and users. Support of FlashCall verification, PIN SMS verification and Callout verification.
    **Note:** OTPCODE must be the full valid E.164 number that we called from.
    ## Overview

    For general information on how to use the Sinch APIs including methods, types, errors and authorization, please check the [Using REST](doc:using-rest) page.

    Use the Sinch Verification Service to verify end-user's mobile phone numbers. The Sinch Verification APIs should be used in combination with the Verification SDKs for a complete end-to-end solution, though it is possible to only use the APIs. Currently, there are three verification methods supported:

    - FlashCall verification - Android only
    - PIN SMS verification - iOS, Android, Javascript
    - Callout verification (voice call) - iOS only

    #### FlashCall verification
    With the flashCall verification method, a user's phone number is verified by triggering a "missed call" towards this number. The call is intercepted by the Android SDK in the mobile app and blocked automatically.

    To initiate a flashCall verification, check the [Android SDK documentation](doc:verification-android-the-verification-process#flash-call-verification). For additional security, it is recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the [Verification Request Event](doc:verification-rest-verification-api#verification-request) and respond accordingly. Your backend will be notified on the result of the verification with the [Verification Result Event](doc:verification-rest-callback-api#verification-result-event).

    #### PIN SMS verification

    With the PIN SMS verification method, a user's phone number is verified by sending an SMS containing a PIN code to this number. In the case of iOS or Javascript, the user needs to enter the PIN manually in the app, while for Android there is an option of intercepting the SMS message delivery and capturing the PIN code automatically.

    To initiate a PIN SMS verification, check the [iOS](doc:verification-ios-sms-verification), [Android](doc:verification-for-android) and [Javascript](doc:verification-for-javascript) documentation. For additional security, it is recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the [Verification Request Event](doc:verification-rest-verification-api#verification-request) and respond accordingly. Your backend will be notified on the result of the verification with the [Verification Result Event](doc:verification-rest-callback-api#verification-result-event).

    #### Callout verification

    With the callout verification method, a user's phone number is verified by receiving a phone call and hearing a pre-recorded or text-to-speech message, advising the user to press a digit code. When the user presses the digit code in the dialpad, the verification is successful.

    To initiate a callout verification, check the [iOS documentation](doc:verification-ios-callout-verification). For additional security, it is recommended that you control which verification requests should proceed and which ones not, by listening in your backend for the [Verification Request Event](doc:verification-rest-verification-api#verification-request) and respond accordingly. Your backend will be notified on the result of the verification with the [Verification Result Event](doc:verification-rest-callback-api#verification-result-event).

    > 📘 For information about webhooks and the verifications events [Callbacks](/docs/verification-rest-callback-api).

  contact:
    name: Sinch
    url: "https://www.sinch.com/contact-us/"
    email: support@sinch.com
  termsOfService: "https://www.sinch.com/terms-of-service/"
servers:
  - url: "https://verificationapi-v1.sinch.com/verification/v1"
tags:
  - name: Sending and Reprting verifications
  - name: Query verifications
x-explorer-enabled: false
x-samples-languages: ["curl", "csharp", "java", "node", "php"]
security:
  - BasicAuth: []
paths:
  /verifications/:
    parameters: []
    post:
      tags:
        - Sending and Reprting verifications
      summary: Start verification
      operationId: sendVerification
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResponse"
              examples:
                FlashCall:
                  value:
                    id: "1234567876"
                    flashCall:
                      cliFilter: "(.*)70123(.*)"
                      interceptionTimeout: 120
                Sms:
                  value:
                    id: "1234567890"
                    sms:
                      template: "Your verfication code is {{CODE}}"
                Callout:
                  value:
                    id: "1234567890"
                    callout:
                      startPollingAfter: 3
                      stopPollingAfter: 30
                      pollingInterval: 3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationRequest"
            examples:
              FlashCall:
                value:
                  identity:
                    type: number
                    endpoint: "+46700000000"
                  method: flashCall
              Sms:
                value:
                  identity:
                    type: number
                    endpoint: "+46700000000"
                  method: sms
              Callout:
                value:
                  identity:
                    type: number
                    endpoint: "+46700000000"
                  method: callout
        description: ""
      description: |-
        This method is used by the mobile and web Verification SDKs to start a verification. It can also be used to request a verification from your backend, by making an request.
        Authorization
        Authorization level can be specified in the Sinch dashboard, under your app settings. By default it is set to "Deny". These schemes are allowed:
  "/verifications/{type}/{endpoint}":
    parameters:
      - schema:
          type: string
          default: number
        name: type
        in: path
        required: true
        example: number
      - schema:
          type: string
        name: endpoint
        in: path
        required: true
    put:
      tags:
        - Sending and Reprting verifications
      summary: "Verify verification code"
      operationId: verifyVerificationCode
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResult"
              examples:
                response:
                  value:
                    id: "1234567890"
                    method: sms
                    status: SUCCESSFUL
                    source: intercept
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerificationReportRequest"
            examples:
              FlashCall:
                value:
                  method: flashCall
                  flashCall:
                    cli: "+46000000000"
              SMS:
                value:
                  method: sms
                  sms:
                    code: "123"
  "/verifications/id/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The verification id recieved when starting verification
    get:
      summary: Get verification result by Id
      tags:
        - Query verifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResult"
              examples:
                Response:
                  value:
                    id: "1234567890"
                    method: sms
                    status: SUCCESSFUL
                    source: intercept
      operationId: getVerificationById
      description: |-
        Queries the verification result by sending the verification id. With this query you can get the result of a verification.

  "/verifications/reference/{id}":
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The verification id
    get:
      summary: Get verification by reference
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResult"
              examples:
                Response:
                  value:
                    id: "1234567123"
                    method: sms
                    status: SUCCESSFUL
                    source: manual
                    reference: abc_123
      operationId: getVerificationByReference
      description: |-
        Queries the verification result by sending the custom reference
        With this query you can get the result of a verification by sending the reference.
      tags:
        - Query verifications
  "/verifications/{method}/{type}/{endpoint}":
    parameters:
      - schema:
          type: string
          enum: [sms, flashcall, callout]
          default: sms
        name: method
        in: path
        description: >
          Methods:
          * 'flashcall' 
          * 'sms'
          * 'callout'
          shows the verification method. It can take the values:
          - "flashcall"
          - "sms"
          - "callout"
        required: true
      - schema:
          type: string
          enum: [number]
          default: number
        name: type
        in: path
        required: true
        description: "endpoints type, must be number"
      - schema:
          type: string
        name: endpoint
        in: path
        required: true
    get:
      summary: Get verification result by number
      tags:
        - Query verifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerificationResult"
              examples:
                response:
                  value:
                    id: "1234567890"
                    method: callout
                    status: SUCCESSFUL
                    reference: abc_123
      operationId: getVerificationsByMethod type
      description: |-
        Queries the verification result by sending the number to be verified.
        > ⚠️ This is not PII safe
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Basic auth with your username application\{applicationkey} password your secret
  schemas:
    FlashCallOptions:
      title: FlashCallOptions
      type: object
      properties:
        cli:
          type: string
        dialTimeout:
          type: integer
      description: "is an optional object for flashCall verifications. It allows you to specify Cli and dial time out parameters for flashCall. Cli is a particular number to be used as caller Id in the flashCall. The number that you specify needs to be a number that you have rented from the Sinch portal. DialTimeout should be specified in seconds and must be between 5 and 120. FlashCallOptions object can be specified optionally, and only if the verification request was triggered from your backend (no SDK client)"
    VerificationRequest:
      title: VerificationRequest
      type: object
      properties:
        identity:
          $ref: "#/components/schemas/Identity"
        method:
          type: string
          default: sms
          example: sms
          description: |-
            indicates the verification method. Possible values are:

            - flashCall
            - sms
            - callout
        reference:
          type: string
          description: can be used to pass your own reference in the request for tracking purposes.
        custom:
          type: string
          description: can be used to pass custom data in the request.
        metadata:
          $ref: "#/components/schemas/Metadata"
        flashCallOptions:
          $ref: "#/components/schemas/FlashCallOptions"
      required:
        - identity
        - method
    Identity:
      title: Identity
      type: object
      properties:
        type:
          type: string
          default: number
        endpoint:
          type: string
          default: +15551231212
      description: 'identity indicates type of endpoint that will be verified and specifies the particular endpoint. The support endpoint type currently is only "number".'
    Metadata:
      title: metadata
      type: object
      description: "Your custom json object"
    VerificationResponse:
      title: VerificationResponse
      type: object
      properties:
        id:
          type: string
        sms:
          $ref: "#/components/schemas/SmsVerificationData"
        flashCall:
          $ref: "#/components/schemas/FlashCallVerificationData"
        callout:
          $ref: "#/components/schemas/CalloutVerificationData"
    SmsVerificationData:
      title: SmsVerificationData
      type: object
      properties:
        template:
          type: string
    FlashCallVerificationData:
      title: FlashCallVerificationData
      type: object
      properties:
        cliFilter:
          type: string
          description: is the filter that should be applied for incoming calls to intercept the flashcall.
        inerceptionTimeout:
          type: integer
          description: indicates the amount of seconds that the SDK client will be waiting for the flashcall.
    CalloutVerificationData:
      title: CalloutVerificationData
      type: object
      description: ""
      properties:
        startPollingafter:
          type: integer
        stopPollingAfter:
          type: integer
        pollingInterval:
          type: integer
    VerificationReportRequest:
      title: VerificationReportRequest
      type: object
      properties:
        method:
          type: string
          description: |-
            indicates the verification method. Possible values are:
            - flashCall
            - sms
          default: SMS
        sms:
          $ref: "#/components/schemas/SmsVerificationReportData"
        flashCall:
          $ref: "#/components/schemas/FlashCallVerificationReportData"
    SmsVerificationReportData:
      title: SmsVerificationReportData
      type: object
      properties:
        code:
          type: string
          description: indicates the PIN code that was inputted by the user in the app
          default: "123456"
        cli:
          type: string
          default: +15551231212
          description: indicates the caller Id of the flashCall or the sender Id of the SMS.
    FlashCallVerificationReportData:
      title: flashCallVerificationReportData
      type: object
      properties:
        cli:
          type: string
          description: indicates the caller Id of the flashCall or the sender Id of the SMS.
    VerificationResult:
      title: VerificationResult
      type: object
      properties:
        id:
          type: string
          description: the verification id
        method:
          type: string
          description: " shows the verification method. It can take the values:\n\n- \"flashcall\"\n- \"sms\"\n- \"callout\""
        status:
          type: string
          description: |-
            shows the current status of the verification request. It can take the values:

            - "PENDING": the verification is ongoing
            - "SUCCESSFUL": the verification was successful
            - "FAIL": the verification attempt was made, but the number was not verified
            - "DENIED": the verification attempt was denied by Sinch or your backend
            - "ABORTED": the verification attempt was aborted by requesting a new verification
            - "ERROR": the verification could not be completed   due to a network error or the number being unreachable.
        reason:
          type: string
          description: |-
            shows the reason why a verification has FAILED, was DENIED or was ABORTED. It can take the values:

            - “Fraud”
            - "Not enough credit"
            - "Blocked"
            - "Denied by callback"
            - "Invalid callback"
            - "Internal error"
            - "Destination denied"
            - "Network error or number unreachable"
            - "Failed pending"
            - "SMS delivery failure"
            - "Invalid CLI"
            - "Invalid code"
            - "Expired"
            - "Hung up without entering valid code"
        reference:
          type: string
          description: shows the reference Id that was passed (optionally) together with the verification request.
        source:
          type: boolean
          description: |-
            This is free text that the client is sending, but it is used to show if the call/SMS was intercepted or not. Typical values can be:

            - “intercepted”
            - "manual"
    Money:
      title: money
      type: object
      properties:
        amount:
          type: number
        currencyId:
          type: string
    RequestEventResponse:
      title: RequestEventResponse
      type: object
      properties:
        action:
          type: string
          description: |-
            action allows or denies the verification to be executed. It can take these values:

            - allow
            - deny
        sms:
          $ref: "#/components/schemas/SMS"
        flashCall:
          $ref: "#/components/schemas/FlashCall"
        callout:
          $ref: "#/components/schemas/Callout"
      description: ""
    SMS:
      title: Sms
      type: object
      x-examples:
        SMS with pre-defined PIN:
          action: allow
          sms:
            code: "12345"
        Set the SMS language to Spanish:
          action: allow
          sms:
            code: "12345"
            acceptLanguage:
              - es-ES
      properties:
        code:
          type: string
          description: "contains the SMS PIN that should be used. By default, the Sinch dashboard will automatically generate PIN codes for SMS verification."
        acceptLanguage:
          type: string
          description: |-
            allows to set (or override if provided in the API request) the SMS verification content language.

            Please note that the content language specified in the API request or in the callback can be overridden by carrier provider specific templates, due to compliance and legal requirements, such as [US shortcode requirements](https://www.wmcglobal.com/storage/us_resources/ctia-short-code-monitoring-handbook-current-Short-Code-Monitoring-Handbook-v1.7.pdf).
    FlashCall:
      title: FlashCall
      type: object
      x-examples:
        Flashcall with pre-defined CLI:
          action: allow
          flashCall:
            cli: "+4445874587"
        Flashcall with pre-defined dial timeout:
          action: allow
          flashCall:
            dialTimeout: 10
      properties:
        cli:
          type: string
          description: "shows the phone number that will be displayed to the user when the flashcall is received on the user's phone. By default, the Sinch dashboard will select randomly the CLI that will be displayed during a flashcall from a pool of numbers. \n\nPlease note that in order to set your own CLI, you need to own the number that you will set."
        dialTimeout:
          type: integer
          description: "shows the maximum time that a flashcall verification will be active and can be completed. If the phone number has not been verified successfully during this time, then the verification request will fail. By default, the Sinch dashboard will automatically optimize dial timeout during a flashcall. "
    Callout:
      title: Callout
      type: object
      properties:
        locale:
          type: string
          description: 'it is used to indicate the language that should be used for the text-to-speech message. Only "en-US" is supported currently.'
        ttsMenu:
          type: string
          description: 'is the message that can be played to the user when the phone call is picked up. Default value is: "To verify your phone number, please press {pin}. If you didn’t request this call, please hangup."'
        wavFile:
          type: string
          description: is the wav file that can be played to the user when the phone call is picked up.
        pin:
          type: string
          description: 'is the digit that the user should press to verify the phone number. Default value is "1".'
    ResultEvent:
      title: ResultEvent
      type: object
      properties:
        id:
          type: string
          description: the verification id
        event:
          type: string
          description: 'contains the callback event that was received. It has the value "VerificationResultEvent".'
        method:
          type: string
          description: |-
            shows the verification method. It can take the values:

            - "flashcall"
            - "sms"
            - "callout"
        identity:
          type: string
          description: 'contains the endpoint information that is being verified. It contains a "type" object and an "endpoint" object'
        status:
          type: string
          description: |-
            shows the current status of the verification request. It can take the values:

            - "PENDING": the verification is ongoing
            - "SUCCESSFUL": the verification was successful
            - "FAIL": the verification attempt was made, but the number was not verified
            - "DENIED": the verification attempt was denied by Sinch or your backend
            - "ABORTED": the verification attempt was aborted by requesting a new verification
            - "ERROR": the verification could not be completed due to a network error or the number being unreachable.
        reason:
          type: string
          description: " shows the reason why a verification has FAILED, was DENIED or was ABORTED. It can take the values:\n\n- “Fraud”\n- \"Not enough credit\"\n- \"Blocked\"\n- \"Denied by callback\"\n- \"Invalid callback\"\n- \"Internal error\"\n- \"Destination denied\"\n- \"Network error or number unreachable\"\n- \"Failed pending\"\n- \"SMS delivery failure\"\n- \"Invalid CLI\"\n- \"Invalid code\"\n- \"Expired\"\n- \"Hung up without entering valid code\""
        reference:
          type: string
          description: shows the reference Id that was passed (optionally) together with the verification request.
        source:
          type: string
          description: |-
            This is free text that the client is sending, but it is used to show if the call/SMS was intercepted or not. Typical values can be:

            - “intercepted”
            - "manual"
        custom:
          type: string
          description: displays a custom string that can be passed provided during a verification request.
      x-examples:
        example:
          id: "1234567890"
          event: VerificationResultEvent
          method: sms
          identity:
            type: number
            endpoint: "+46700000000"
          status: SUCCESSFUL
